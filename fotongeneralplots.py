# -*- coding: utf-8 -*-
"""Fotongeneralplots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BmkMsfG_8UKWrgw-CLkphYWXwAb7RluJ
"""

import numpy as np
import matplotlib.pyplot as plt
#se grafican las evoluciones con Lz=-1
data = np.genfromtxt("fotongeneralbur_-1.dat", delimiter=",")
t = data[:, 0]
r = data[:, 1]
theta=data[:,2]
phi=data[:,3]

fig, axs = plt.subplots(3, 1, figsize=(5, 12))


axs[0].plot(t, r, label=r"$r(t)$", color='b')
axs[0].set_xlabel(r"Tiempo $t$")
axs[0].set_ylabel(r"Coordenada radial $r$")
axs[0].set_title("Movimiento radial del fotón en la métrica de Kerr")
axs[0].legend()
axs[0].grid()


axs[1].plot(t, phi, label=r"$\phi(t)$", color='b')
axs[1].set_xlabel(r"Tiempo $t$")
axs[1].set_ylabel(r"Ángulo azimutal $\phi$")
axs[1].set_title("Movimiento azimutal del fotón en la métrica de Kerr")
axs[1].legend()
axs[1].grid()


axs[2].plot(t, theta, label=r"$\theta(t)$", color='b')
axs[2].set_xlabel(r"Tiempo $t$")
axs[2].set_ylabel(r"Ángulo polar $\theta$")
axs[2].set_title("Movimiento polar del fotón en la métrica de Kerr")
axs[2].legend()
axs[2].grid()

plt.tight_layout()
plt.savefig("Burlisch-1dim")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
#se grafican con Lz=1
data1 = np.genfromtxt("fotongeneralbur_1.dat", delimiter=",")
t1 = data1[:, 0]
r1 = data1[:, 1]
theta1=data1[:,2]
phi1=data1[:,3]

fig, axs = plt.subplots(3, 1, figsize=(5, 12))


axs[0].plot(t1, r1, label=r"$r(t)$", color='b')
axs[0].set_xlabel(r"Tiempo $t$")
axs[0].set_ylabel(r"Coordenada radial $r$")
axs[0].set_title("Movimiento radial del fotón en la métrica de Kerr")
axs[0].legend()
axs[0].grid()


axs[1].plot(t1, phi1, label=r"$\phi(t)$", color='b')
axs[1].set_xlabel(r"Tiempo $t$")
axs[1].set_ylabel(r"Ángulo azimutal $\phi$")
axs[1].set_title("Movimiento azimutal del fotón en la métrica de Kerr")
axs[1].legend()
axs[1].grid()


axs[2].plot(t1, theta1, label=r"$\theta(t)$", color='b')
axs[2].set_xlabel(r"Tiempo $t$")
axs[2].set_ylabel(r"Ángulo polar $\theta$")
axs[2].set_title("Movimiento polar del fotón en la métrica de Kerr")
axs[2].legend()
axs[2].grid()

plt.tight_layout()
plt.savefig("Burlisch1dim")
plt.show()

#se grafica trayectoria en 3d para -1
x=np.sqrt(r**2+0.9**2)*np.sin(theta)*np.cos(phi)
y=np.sqrt(r**2+0.9**2)*np.sin(theta)*np.sin(phi)
z=r*np.cos(theta)
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c='r', marker='o')
ax.plot(x, y, z, color='r', linewidth=2)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

#grafica 3d en lz=1
x1=np.sqrt(r1**2+0.9**2)*np.sin(theta1)*np.cos(phi1)
y1=np.sqrt(r1**2+0.9**2)*np.sin(theta1)*np.sin(phi1)
z1=r1*np.cos(theta1)
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x1, y1, z1, c='r', marker='o')
ax.plot(x1, y1, z1, color='r', linewidth=2)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

import matplotlib.pyplot as plt
import numpy as np
#más grafica 3d con Lz=-1

x = np.sqrt(r**2 + 0.9**2) * np.sin(theta) * np.cos(phi)
y = np.sqrt(r**2 + 0.9**2) * np.sin(theta) * np.sin(phi)
z = r * np.cos(theta)

fig = plt.figure(figsize=(12, 10))

views = [(10, 25), (0, 0), (90, 0)]

for i, (elev, azim) in enumerate(views, 1):
    ax = fig.add_subplot(2, 2, i, projection='3d')
    ax.scatter(x, y, z, c='r', marker='o')
    ax.plot(x, y, z, color='r', linewidth=2)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.view_init(elev=elev, azim=azim)
    ax = fig.add_subplot(2, 2, 4, projection='3d')
    ax.scatter(x, y, z, c='r', marker='o')
    ax.plot(x, y, z, color='r', linewidth=2)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

plt.tight_layout()
plt.savefig("burlisch-13d")
plt.show()

fig = plt.figure(figsize=(12, 10))

views = [(10, 25), (0, 0), (90, 0)]

for i, (elev, azim) in enumerate(views, 1):
    ax = fig.add_subplot(2, 2, i, projection='3d')
    ax.scatter(x1, y1, z1, c='r', marker='o')
    ax.plot(x1, y1, z1, color='r', linewidth=2)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.view_init(elev=elev, azim=azim)
    ax = fig.add_subplot(2, 2, 4, projection='3d')
    ax.scatter(x1, y1, z1, c='r', marker='o')
    ax.plot(x1, y1, z1, color='r', linewidth=2)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

plt.tight_layout()
plt.savefig("burlisch13d")
plt.show()

#graficas con rk4
data3=np.genfromtxt("fotongeneral.dat",delimiter=",")
t3=data3[:,0]
r3=data3[:,1]
theta3=data3[:,2]
phi3=data3[:,3]
x3=np.sqrt(r3**2+0.9**2)*np.sin(theta3)*np.cos(phi3)
y3=np.sqrt(r3**2+0.9**2)*np.sin(theta3)*np.sin(phi3)
z3=r3*np.cos(theta3)
plt.plot(x3,y3)

plt.plot(x,y,color="red", label="Lz=-1")#con Lz=-1
plt.plot(x1,y1,color="blue", label="Lz=1")#con Lz=1
plt.plot(x3,y3,color="black", label="Lz=-1,Rk4")#Con rk4, Lz=-1
#plt.axis("equal")
plt.xlabel("x")
plt.ylabel("y")
plt.title("rk4 vs burlisch -1 y 1")
plt.legend()
plt.grid()
plt.savefig("rk4vsburlisch")
plt.show()

def cargar_datos(nombre_archivo):
    datos = np.loadtxt(nombre_archivo, delimiter=',')
    t, r, theta, phi = datos.T  # Transpone para separar variables
    return r, theta, phi

def graficar_ergosfera(nombre_archivo, a=0.9, M=1.0):
    r, theta, phi = cargar_datos(nombre_archivo)

    # Calcular la ergosfera
    r_ergosfera = M + np.sqrt(M**2 - (a*M)**2 * np.cos(theta)**2)

    # Convertir a coordenadas cartesianas para la gráfica
    x=np.sqrt(r**2+a**2)*np.sin(theta)*np.cos(phi)
    y=np.sqrt(r**2+a**2)*np.sin(theta)*np.sin(phi)

    # Calcular la ergosfera en el plano ecuatorial (theta = pi/2)
    r_erg = M + np.sqrt(M**2 - a**2)
    theta_eq = np.pi / 2  # Plano ecuatorial
    phi_vals = np.linspace(0, 2*np.pi, 200)

    x_erg = np.sqrt(r_erg**2 + a**2) * np.sin(theta_eq) * np.cos(phi_vals)
    y_erg = np.sqrt(r_erg**2 + a**2) * np.sin(theta_eq) * np.sin(phi_vals)

    plt.figure()
    plt.plot(x, y, label='Trayectoria particula', alpha=0.9)
    plt.plot(x_erg, y_erg, label='Ergosfera', linestyle='dashed', color='red')

    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("Ergosfera y trayectoria en la métrica de Kerr")
    plt.legend()
    plt.grid()
    plt.axis('equal')
    plt.show()

# Uso del código
graficar_ergosfera("fotongeneralbur_-1.dat")
plt.savefig("ergosfera")
plt.show()

# Parámetros de la métrica de Kerr
M = 1.0  # Masa del agujero negro
a = 0.9  # Momento angular reducido

# Cargar datos del archivo .dat
archivo = "fotongeneralbur_-1.dat"  # Cambia el nombre si es necesario
datos = np.loadtxt(archivo, delimiter=',')

t = datos[:, 0]
r = datos[:, 1]
theta = datos[:, 2]
phi = datos[:, 3]

# Convertir a coordenadas cartesianas
x = np.sqrt(r**2 + a**2) * np.sin(theta) * np.cos(phi)
y = np.sqrt(r**2 + a**2) * np.sin(theta) * np.sin(phi)

 # Calcular la ergosfera en el plano ecuatorial (theta = pi/2)
r_erg = M + np.sqrt(M**2 - a**2)
theta_eq = np.pi / 2  # Plano ecuatorial
phi_vals = np.linspace(0, 2*np.pi, 200)

x_erg = np.sqrt(r_erg**2 + a**2) * np.sin(theta_eq) * np.cos(phi_vals)
y_erg = np.sqrt(r_erg**2 + a**2) * np.sin(theta_eq) * np.sin(phi_vals)

# Graficar
plt.figure(figsize=(8, 8))
plt.plot(x, y, label="Trayectoria del fotón", color="blue")
plt.plot(x_erg, y_erg, '--r', label="Ergosfera (extremo estático)")
plt.xlabel("x")
plt.ylabel("y")
plt.axhline(0, color="black", linewidth=0.5)
plt.axvline(0, color="black", linewidth=0.5)
plt.legend()
plt.title("Trayectoria del fotón y la ergosfera en la métrica de Kerr")
plt.grid()
plt.show()